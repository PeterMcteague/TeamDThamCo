@model HistoryDTO

@{
    ViewData["Title"] = "Your order history";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>History</title>
</head>
<body>
    <div data-role="main" class="ui-content">
        @if (Model == null)
        {
            <hr />
            <b>The order service is down</b>
        }
        else
        {
            if (Model.orderAndItems == null)
            {
                <b>You have no orders.</b>

            }
            else
            {
                @foreach (OrderAndItemDTO i in Model.orderAndItems)
                {
                    <div data-role="collapsible">
                        <button class="accordion">
                            Order #@i.Order.id
                            @if (!i.Order.paid)
                            {
                                <p style="color:#FF0000"><b>Unpaid</b></p>
                            }
                        </button>
                        <div class="panel">
                            <p></p>
                            @foreach (OrderItem o in i.Items)
                            {
                                <p>@o.quantity * @o.itemName </p>
                            }
                            <hr />
                            <p><b>Placed: </b> @i.Order.orderDate</p>
                            <p><b>Paid: </b> @i.Order.paid</p>
                            <p><b>Dispatched: </b> @i.Order.dispatched</p>
                            @if (!i.Order.paid && Model.canPurchase)
                            {
                                <a href="@Url.Action("ExistingItemPayment","Orders", i.Order.id)"
                                   class="btn btn-primary btn-lg">Pay now!</a>
                            }
                        </div>
                    </div>
                    <hr />
                }
                <p><b>Total: </b> £@Model.total.ToString()</p>
            }
        }
    </div>
</body>
</html>

<script>
    var acc = document.getElementsByClassName("accordion");
    var i;

    for (i = 0; i < acc.length; i++) {
        acc[i].onclick = function () {
            /* Toggle between adding and removing the "active" class,
            to highlight the button that controls the panel */
            this.classList.toggle("active");

            /* Toggle between hiding and showing the active panel */
            var panel = this.nextElementSibling;
            if (panel.style.display === "block") {
                panel.style.display = "none";
            } else {
                panel.style.display = "block";
            }
        }
    }
</script>

<style>
    /* Style the buttons that are used to open and close the accordion panel */
    button.accordion {
        background-color: #eee;
        color: #444;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        text-align: left;
        border: none;
        outline: none;
        transition: 0.4s;
    }

        /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
        button.accordion.active, button.accordion:hover {
            background-color: #ccc;
        }

    /* Style the accordion panel. Note: hidden by default */
    div.panel {
        padding: 0 18px;
        background-color: white;
        display: none;
    }
</style>